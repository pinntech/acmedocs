swagger: '2.0'
schemes:
  - https
host: acme.pinnapis.com
basePath: /
info:
  description: |
    The ACME Bank backend is a demonstration web server that provides a 
    REST API for both registration and login. Its main purpose is to be
    a consumer of the Pinn hosted REST APIs. Its major functionality is
    supporting the registration of new users (and enrolling their biometrics),
    as well as authenticating a user with both biometrics and traditional
    credentials
  version: '0.1.0'
  title: ACME Bank API
  x-logo:
    url: 'https://raw.githubusercontent.com/pinntech/acmedocs/master/web/logo.png'
produces:
  - application/json
consumes:
  - application/json

tags:
  - name: Register
    description: Create and enroll an ACME Bank end user
  - name: Login
    description: Authenticate and verify an ACME Bank end user

paths:
  '/register':
    post:
      tags:
        - Register
      summary: Sign-up endpoint for new users
      description: This endpoint creates and persists the user, records their
       chosen password, and finally enrolls their biometric data
      operationId: register
      parameters:
        - in: body
          name: body
          description: Parameters for user registration
          required: true
          schema:
            type: object
            required:
              - username
              - password
              - left_palm
              - right_palm
            properties:
              username:
                type: string
                description: Username supplied by the end user registering
                example: dmwesterhoff
              password:
                type: string
                description: Password supplied by the end user for credential auth
                example: p1nnc0de
              left_palm:
                type: string
                description: Base64 encoded JPEG data of the left palm capture image
                example: MII...==
              right_palm:
                type: string
                description: Base64 encoded JPEG data of the right palm capture image
                example: MII...==
      responses:
        '200':
          description: Ok
          schema: 
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 1
              username: dmwesterhoff
              pinn_user_id: usr_RMcDzQsFw6g7lhmk
              object: user
              created: 1533171964
        '400':
          description: Bad Request
          schema: 
            $ref: '#/definitions/Error'
          examples:
            code: 400
            message: The browser (or proxy) sent a request that this server could not understand.
            type: bad_request
        '422':
          description: Palm Not Found
          schema: 
            $ref: '#/definitions/Error'
          examples:
            code: 422
            message: Palm could not be detected in the provided image.
            type: palm_not_found
  '/login':
    post:
      tags:
        - Login
      summary: A sign-in endpoint for existing users
      description: This endpoint "logs in" a user with their existing credentials and captured biometric data
      operationId: login
      parameters:
        - in: body
          name: body
          description: Authentication parameters
          required: true
          schema:
            type: object
            required:
              - username
              - password
              - palm
            properties:
              username:
                type: string
                description: Username supplied by the end user logging in
                example: dmwesterhoff
              password:
                type: string
                description: Password supplied by the end user logging in
                example: p1nnc0de
              palm:
                type: string
                description: Base64 encoded JPEG data of the left or right palm capture image
                example: MII...==
      responses:
        '200':
          description: Ok
          schema: 
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 1
              username: dmwesterhoff
              pinn_user_id: usr_RMcDzQsFw6g7lhmk
              object: user
              created: 1533171964
        '400':
          description: Bad Request
          schema: 
            $ref: '#/definitions/Error'
          examples:
            code: 400
            message: The browser (or proxy) sent a request that this server could not understand.
            type: bad_request
        '401':
          description: Unauthorized
          schema: 
            $ref: '#/definitions/Error'
          examples:
            code: 401
            message: The server could not verify that you are authorized to access the URL requested.  You either supplied the wrong credentials (e.g. a bad password), or other security parameters were invalid
            type: unauthorized
        '422':
          description: Palm Not Found
          schema: 
            $ref: '#/definitions/Error'
          examples:
            code: 422
            message: Palm could not be detected in the provided image.
            type: palm_not_found

definitions:
  User:
    type: object
    properties:
      id:
        description: Unique identifier for the ACME Bank user
        type: integer
        minLength: 1
        example: 1
      username:
        description: User supplied username
        type: string
        minLength: 4
        example: dmwesterhoff
      pinn_user_id:
        description: The Pinn user identifier, created by Pinn API at the time of user creation
        type: string
        example: usr_RMcDzQsFw6g7lhmk
      object:
        description: The type of object, which is always `user`
        type: string
        example: user
      created:
        description: Timestamp of creation, an integer that is the number of seconds since unix epoch
        type: integer
        example: 1533171964
  Error:
    type: object
    properties:
      code:
        description: The HTTP Response status code
        type: integer
        example: 400
      message:
        description: Developer friendly error message
        type: string
        example: The browser (or proxy) sent a request that this server could not understand.
      type:
        description: A type value for the error, that is a static string and can be used for more robust error handling than the code value
        type: string
        example: bad_request


